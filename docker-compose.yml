version: '3.8'
services:
  web-app:
    container_name: web-app
    image: django_gunicorn_instance # Added in
    command: sh -c ${WEB_APP_START_SCRIPT}
    restart: always
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    # Passes the environment file through for decouple
    env_file:
      - ${ENV_FILE}
    volumes:
      - .:/app
      # '/app/staticfiles' will be shared through 'static_volume'
      # - static_volume:/app/staticfiles
    networks:
      - db_network
      - web_network
    depends_on:
      - db
      - redis

  db:
    container_name: db
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${SQL_DATABASE_ENV}
      - POSTGRES_USER=${SQL_USER_ENV}
      - POSTGRES_PASSWORD=${SQL_PASSWORD_ENV}
    expose:
      # Expose this port to all connections
      - "5432"
    restart: always
    networks:
      # Make sure the webapp and the db has access to the same networks
      - db_network

  redis:
    image: redis:7-alpine
    # Save to disk every 20 seconds
    command: redis-server --save 20 1
    networks:
      # Make sure the redis and the db has access to the same networks
      - db_network
      - web_network
    volumes:
      - cache:/data

  # UI to see redis cache info
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD}
    ports:
      - 8081:8081
    networks:
      # Make sure the redis and the db has access to the same networks
      - db_network
      - web_network
    depends_on:
      - redis

  celery_worker:
    # Build off the same docker file as Django, since they share many scripts and Celery tasks use django's ORM
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: web-app_celery_worker
    command: /start-celeryworker
    restart: always
    volumes:
      - .:/app
    env_file:
      # - ./.env/.dev-sample
      - ${ENV_FILE}
    networks:
      - db_network
      - web_network
    depends_on:
      - db
      - redis

  celery_beat:
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: web-app_celery_beat
    command: /start-celerybeat
    restart: always
    volumes:
      - .:/app
    env_file:
      # - ./.env/.dev-sample
      - ${ENV_FILE}
    networks:
      - db_network
      - web_network
    depends_on:
      - redis
      - db

  flower:
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: web-app_celery_flower
    command: /start-flower
    restart: always
    volumes:
      - .:/app
    env_file:
      # - ./.env/.dev-sample
      - ${ENV_FILE}
    ports:
      - 5557:5555
    networks:
      - db_network
      - web_network
    depends_on:
      - redis
      - db

  nginx:
    container_name: nginx
    restart: always
    image: "nginx:latest"
    ports:
      - ${NGINX_PORT}
    volumes:
      - ./nginx/${NGINX_DIRECTORY}:/etc/nginx/conf.d
      # '/staticfiles' will be shared through 'static_volume' and get files from web-app
      # - static_volume:/staticfiles
    networks:
      - web_network
    depends_on:
      - web-app

networks:
  db_network:
    driver: bridge # Bridge means there is no network being created
  web_network:
    driver: bridge

volumes:
  postgres_data: # Save on the 'local' volume (I believe like a name)

  # redisinsight:

  cache:
    driver: local
